sqlite3-cheat-sheet.md
http://www.newthinktank.com/2013/05/sqlite3-tutorial/
SQLite3 Cheat Sheet

https://www.sqlitetutorial.net/sqlite-cheat-sheet/

# Info
Download from:
http://www.sqlite.org/download.html
Getting Started:
http://www.sqlite.org/sqlite.html
Documentation:
http://www.sqlite.org/docs.html

# Commands

Open/Create a Database, This is done using the command line program.
```
sqlite3 {database file name}
sqlite3 my_stuff_database.db
```
If the database exists it will be opened, if it doesn’t exist, it will be created (sort of – you’ll need to perform some sort of write operation first)

Print the database structure
```
.schema
```


Print database structure and data
```
.dump
```


Turn on column names on query results
```
.explain on
```
To turn it off do:
```
.explain off
```


This will return the output to the default of pipe-separated values with no column header. Use the following command to see the current ‘explain’ status:
```
.show
```


Creating Tables
create table {table name} ('{column name}' {data type} primary key, '{column name}' {data type});
Eg:
CREATE TABLE my_things('id' int primary key, 'name' varchar(20), 'description' varchar(50));
Adding a Column to a Table
alter table {table name} ADD '{column name}' {data type};
Eg:
alter table my_things ADD 'description' varchar(50);
Deleting a table
drop table {table name};
Eg:
drop table my_things;
Inserting Data into a Table
insert into {table name} values ({data}, {more data}, '{yet more data}');
Eg:
insert into my_things values (1, 'My first thing', 'It is nice');
Transactions
begin transaction;
{put the relevant queries here}
commit;
Output query results to a file
.output {filename.txt}
After entering the above command, the results of subsequent queries will be written to the specified file
Change the output back to being printed to the console by typing the following:
.output stdout






SQLite3 Cheat Sheet

view sourceprint?
001
sqlite3 test.db // open sqlite and provide a database name
002
 
003
// Creates a table in the database
004
// Primary Key automatically generates values that start at 1 and increase by 1
005
// name is a text field that will hold employee names
006
 
007
create table employees (id integer primary key, name text);
008
 
009
// Insert some employees
010
 
011
insert into employees (id, name) values(1, 'Max Eisenhardt');
012
insert into employees (name) values('Pietro Maximoff');
013
insert into employees (name) values('Wanda Maximoff');
014
insert into employees (name) values('Mortimer Toynbee');
015
insert into employees (name) values('Jason Wyngarde');
016
 
017
// In column mode, each record is shown on a separate line with the data aligned in columns
018
 
019
// headers on shows the column names, if off they wouldn't show
020
 
021
.mode column
022
.headers on
023
select * from employees; // Show all employees
024
 
025
// Changes the width of the columns
026
 
027
.width 15 20
028
 
029
.exit // Closes the database
030
 
031
sqlite3 test.db // Reopen database
032
 
033
.tables // Displays the tables
034
 
035
// Displays every value on its own line
036
 
037
.mode line
038
select * from employees;
039
 
040
// Shows the statements used to create the database. You could also provide a table name to see how that single table was made
041
 
042
.schema OR .schema employees
043
 
044
// You can get a more detailed database view
045
 
046
.mode column
047
.headers on
048
select type, name, tbl_name, sql from sqlite_master order by type;
049
 
050
// Used to show the current settings
051
 
052
.show
053
 
054
// Set NULL to 'NULL'
055
 
056
.nullvalue 'NULL'
057
.show
058
 
059
// Change the prompt for SQLite
060
 
061
.prompt 'sqlite3> '
062
.show
063
 
064
// Used to export database into SQL format on the screen
065
 
066
.dump
067
 
068
// Used to output to a file
069
 
070
.output ./Documents/sqlite3Files/employees.sql
071
.dump
072
.output stdout // Restores output to the screen
073
 
074
// You don't delete a database with any command. You have to delete the file itself
075
 
076
// You can delete a table however
077
 
078
drop table employees;
079
 
080
// You can import the table then with
081
 
082
.read ./Documents/sqlite3Files/employees.sql
083
 
084
// .mode is used to change the formatting of the output
085
// OPTIONS FOR MODE : column, csv
086
// html: html table
087
// insert: insert commands used
088
// list: List without commas
089
// tabs: Tab separated list
090
 
091
// How to output a CSV list to a file
092
 
093
.mode csv // You could define the output should be csv
094
.separator ,  // OR define the separator for the columns
095
.output ./Documents/sqlite3Files/employees.csv
096
.separator ,
097
select * from employees;
098
.output stdout
099
 
100
// Output html table
101
 
102
.mode html
103
select * from employees;
104
.output stdout
105
 
106
// line outputs column name and value
107
 
108
.mode line
109
select * from employees;
110
.output stdout
111
 
112
// Items with double quotes
113
 
114
.mode tcl
115
select * from employees;
116
.output stdout


SQLite
Enjoy this cheat sheet at its fullest within Dash, the macOS documentation browser.
Meta Commands
.backup ?DB? FILE

Backup DB (default "­mai­n") to FILE

.bail ON|OFF

Stop after hitting an error. Default OFF

.databases

List names and files of attached databases

.dump ?TABLE? ...

Dump the database in an SQL text format.

.echo ON|OFF

Turn command echo on or off

.exit

Exit this program

.explain ?ON|OFF?

Turn output mode suitable for EXPLAIN on or off.

.header(s) ON|OFF

Turn display of headers on or off

.help

Shows this inform­ation.

.import FILE TABLE

Import data from FILE into TABLE

.indices ?TABLE?

Show names of all indices

.load FILE ?ENTRY?

Load an extension library

.log FILE|off

Turn logging on or off. FILE can be stderr­/stdout

.mode MODE ?TABLE?

Set output mode where MODE is one of: csv, column, html, insert, line, list, tabs, tcl

.nullvalue STRING

Print STRING in place of NULL values

.output FILENAME

Send output to FILENAME

.output stdout

Send output to the screen

.prompt MAIN CONTINUE

Replace the standard prompts

.quit

Exit this program

.read FILENAME

Execute SQL in FILENAME

.restore ?DB? FILE

Restore content of DB (default "­mai­n") from FILE

.schema ?TABLE?

Show the CREATE statements

.separator STRING

Change separator used by output mode and .import

.show

Show the current values for various settings

.stats ON|OFF

Turn stats on or off

.tables ?TABLE?

List names of tables

.timeout MS

Try opening locked tables for MS millis­econds

.width NUM1 NUM2 ...

Set column widths for "­col­umn­" mode

.timer ON|OFF

Turn the CPU timer measur­ement on or off

Options
-init file

Read and execute commands from file , which can contain a mix of SQL statements and meta-c­omm­ands.

-echo

Print commands before execution.

-[no]h­eader

Turn headers on or off.

-bail

Stop after hitting an error.

-inter­active

Force intera­ctive I/O .

-batch

Force batch I/O .

-column

Query results will be displayed in a table like form, using whitespace characters to separate the columns and align the output.

-csv

Set output mode to CSV (comma separated values).

-html

Query results will be output as simple HTML tables.

-line

Query results will be displayed with one value per line, rows separated by a blank line. Designed to be easily parsed by scripts or other programs

-list

Query results will be displayed with the separator (|, by default) character between each field value. The default.

-separator separator

Set output field separator. Default is "|".

-stats

Print memory stats before each finalize.

-nullvalue string

Set string used to represent NULL values. Default is (empty string).

-version

Show SQLite version.

-vfs name

Use name as the default VFS .

-help

Show help on options and exit.

Notes
Based on sqlite3 cheat sheet by richardjh
You can modify and im


